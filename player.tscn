[gd_scene load_steps=12 format=3 uid="uid://6t0kob2r68og"]

[ext_resource type="Texture2D" uid="uid://ciay3mspqdggm" path="res://sprites/1.png" id="1_4flbx"]
[ext_resource type="PackedScene" uid="uid://dj34w5mvtg6ay" path="res://weapons/WeaponPickup.tscn" id="2_ysajf"]
[ext_resource type="PackedScene" uid="uid://cr5bok1l3ascq" path="res://weapons/WeaponPickupExample.tscn" id="3_ksl3e"]

[sub_resource type="GDScript" id="GDScript_4flbx"]
resource_name = "player"
script/source = "extends CharacterBody2D

# ðŸ“Œ Constantes et variables
const SPEED = 100.0
@onready var anim = $AnimationPlayer  # Assurez-vous qu'il correspond Ã  votre noeud
@onready var sprite = $sprite  # Ajout pour manipuler le sprite correctement
@onready var last_direction = \"walk_down\"  # MÃ©morise la derniÃ¨re direction

# ðŸ“Œ Gestion des armes
@export var weapon: NodePath  # L'arme actuelle du joueur (assignable dans l'inspecteur)
var current_weapon: Weapon = null  # RÃ©fÃ©rence Ã  l'arme actuelle
@export var weapon_pickup_scene: PackedScene  # La scÃ¨ne de pickup d'arme Ã  utiliser

func _ready():
	# Ajouter le joueur au groupe pour la dÃ©tection
	add_to_group(\"player\")
	
	if weapon:
		current_weapon = get_node(weapon)

func _physics_process(delta):
	get_input()
	move_and_slide()
	
	if current_weapon:
		handle_weapon()
		
	# GÃ©rer la dÃ©pose d'arme avec la touche F
	if Input.is_action_just_pressed(\"drop\") and current_weapon:
		drop_weapon()

# ðŸ“Œ GÃ¨re le dÃ©placement et les animations
func get_input():
	var input_direction = Input.get_vector(\"left\", \"right\", \"up\", \"down\")
	velocity = input_direction * SPEED

	if anim:
		if input_direction == Vector2.ZERO:
			anim.stop()  # ArrÃªte l'animation si le joueur ne bouge pas
		else:
			# Change l'animation en fonction de la direction
			if input_direction.x > 0:
				last_direction = \"walk-right\"
			elif input_direction.x < 0:
				last_direction = \"walk-left\"
			elif input_direction.y > 0:
				last_direction = \"walk-down\"
			elif input_direction.y < 0:
				last_direction = \"walk-up\"

			if anim.current_animation != last_direction:
				anim.play(last_direction)

# ðŸ“Œ GÃ¨re l'utilisation de l'arme
func handle_weapon():
	var shoot_direction = (get_global_mouse_position() - global_position).normalized()

	if Input.is_action_pressed(\"shoot\") and current_weapon:
		current_weapon.shoot(shoot_direction)

	if Input.is_action_just_pressed(\"reload\") and current_weapon:
		current_weapon.reload()

# ðŸ“Œ Fonction pour changer d'arme
func equip_weapon(new_weapon_scene: PackedScene):
	if current_weapon:
		current_weapon.queue_free()  # Supprime l'ancienne arme

	current_weapon = new_weapon_scene.instantiate()
	add_child(current_weapon)  # Ajoute l'arme au joueur
	
# ðŸ“Œ Fonction pour dÃ©poser l'arme au sol
func drop_weapon():
	if current_weapon and weapon_pickup_scene:
		# CrÃ©er un pickup d'arme
		var pickup = weapon_pickup_scene.instantiate()
		pickup.weapon_scene = load(current_weapon.get_path())
		
		# Positionner le pickup Ã  cÃ´tÃ© du joueur (dÃ©calage lÃ©ger pour Ã©viter collision)
		var offset = Vector2(20, 0)
		if last_direction == \"walk-left\":
			offset.x = -20
		elif last_direction == \"walk-up\":
			offset = Vector2(0, -20)
		elif last_direction == \"walk-down\":
			offset = Vector2(0, 20)
			
		pickup.position = global_position + offset
		
		# Ajouter le pickup Ã  la scÃ¨ne
		get_parent().add_child(pickup)
		
		# Supprimer l'arme actuelle
		current_weapon.queue_free()
		current_weapon = null
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_i3pqv"]

[sub_resource type="Animation" id="Animation_onrkg"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [3]
}

[sub_resource type="Animation" id="Animation_i3pqv"]
resource_name = "walk-down"
length = 0.5
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [1, 5, 9, 13, 17]
}

[sub_resource type="Animation" id="Animation_sweqy"]
resource_name = "walk-left"
length = 0.5
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [0, 4, 8, 12, 16]
}

[sub_resource type="Animation" id="Animation_hqtel"]
resource_name = "walk-right"
length = 0.5
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [2, 6, 10, 14, 18]
}

[sub_resource type="Animation" id="Animation_4flbx"]
resource_name = "walk-up"
length = 0.5
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [3, 7, 11, 15, 19]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_1jxqw"]
_data = {
&"RESET": SubResource("Animation_onrkg"),
&"walk-down": SubResource("Animation_i3pqv"),
&"walk-left": SubResource("Animation_sweqy"),
&"walk-right": SubResource("Animation_hqtel"),
&"walk-up": SubResource("Animation_4flbx")
}

[node name="main" type="Node2D"]

[node name="player" type="CharacterBody2D" parent="." groups=["player"]]
script = SubResource("GDScript_4flbx")
weapon_pickup_scene = ExtResource("2_ysajf")

[node name="Camera2D" type="Camera2D" parent="player"]
zoom = Vector2(5, 5)
position_smoothing_enabled = true
position_smoothing_speed = 1.0

[node name="sprite" type="Sprite2D" parent="player"]
texture = ExtResource("1_4flbx")
hframes = 4
vframes = 5
frame = 3

[node name="CollisionShape2D" type="CollisionShape2D" parent="player"]
shape = SubResource("RectangleShape2D_i3pqv")

[node name="AnimationPlayer" type="AnimationPlayer" parent="player"]
root_node = NodePath("../sprite")
libraries = {
&"": SubResource("AnimationLibrary_1jxqw")
}

[node name="PistolPickup" parent="." instance=ExtResource("3_ksl3e")]
position = Vector2(30, 0)
